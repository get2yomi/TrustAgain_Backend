django-admin startproject first_project
 python manage.py startapp first_app = this is to create a new application in django
 lsof -i :8000
 kill -9 pid.
conda activate myDjangoEnv
pip install -r /home/TrustAgain/TrustAgain_Backend/requirements.txt
pip install djangorestframework
 python manage.py collectstatic 
 pip install djangorestframework-simplejwt
  pip install -r requirements.txt
  python manage.py makemigrations
python manage.py migrate
python manage.py runserver
python manage.py createsuperuser




------------------------------
pip install django-cors-headers
python manage.py show_urls
pip install django-extensions
pip install djangorestframework djangorestframework.authtoken
python manage.py runserver 0.0.0.0:8000

 timezone.now()

 -----------------------------
 # 1️⃣ Build the Docker Image
docker build -t trustagain_backend .

# 2️⃣ Run the Django App in a Container
docker run -p 8000:8000 my-django-app
docker login
docker tag my-django-app your-dockerhub-username/my-django-app:v1
docker push your-dockerhub-username/my-django-app:v1
-----------------------------------------------------
Once your image is on Docker Hub, you can run it anywhere (AWS, DigitalOcean, or any server) with:
docker run -p 8000:8000 your-dockerhub-username/my-django-app:v1
==========================
this is used to generate requirement.txt file.
pip freeze > requirements.txt

docker login -u <username>'
==============================
to run my continer, docker run image_id
to run my container and expose to the host machine:
docker run -d -p 8000:8000 --name trustagain_backend trustagain_backend
----------------------------------
-d = means run the container in background of detachmode.
-p 8000:8000 → Maps port 8000 in the container to port 8000 on your local machine.
--name trustagain_backend → Names the running container (optional).
================================
docker stop trustagain_backend == stop conatiner running
==========================
to push to docker repo
1= docker login
2= docker tag trustagain_backend get2kunle/trustagain_backend_deploy:v1
3= docker push get2kunle/trustagain_backend_deploy:v1
================================
when pushing to docker hub and you encounter error, the folllwoing steps was done.
1= rm ~/.docker/config.json === i remove this file and relogin backgain using docker login command.
=================================
generae work structure
=================================
python manage.py graph_models -a -o my_project_models.png
-------------------
python manage.py collectstatic

---------------------------------------
used in generating secret key
python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
pip install python-dotenv

-------------------------------
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver
-------------------------------------
using PostgreSQL for our database
pip install psycopg2-binary   ==Install the PostgreSQL Adapter for Python
pip install psycopg2-binary

pip install django-environ
-------------------------------------
installing postgresql database on mac and connecting to it...
---------------------
brew install postgresql
brew services start postgresql
# Login to PostgreSQL (Linux/Mac)
sudo -u postgres psql or psql postgres
================
CREATE DATABASE TrustAgain;
CREATE USER your_db_user WITH PASSWORD 'IMAGEtrust@5010';
ALTER ROLE your_db_user SET client_encoding TO 'utf8';
ALTER ROLE your_db_user SET default_transaction_isolation TO 'read committed';
ALTER ROLE your_db_user SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE TrustAgain_db TO TrustAgain_user;
==================
-- Step 1: Create the user
CREATE USER trustagain_user WITH PASSWORD 'IMAGEtrust@5010';
-- Step 2: (Optional best practices)
ALTER ROLE trustagain_user SET client_encoding TO 'utf8';
ALTER ROLE trustagain_user SET default_transaction_isolation TO 'read committed';
ALTER ROLE trustagain_user SET timezone TO 'UTC';

-- Step 3: Grant full access to the database
GRANT ALL PRIVILEGES ON DATABASE TrustAgain TO trustagain_user;

------------------------------------------------------
you can test using = psql -U your_db_user -d your_db_name
======
psql -U trustagain_user -d TrustAgain
\l == this is to check table created..

username: admin
password: admin@123456
----------------------------------------
examples to run python shell in a bash command prompt in Django we first type
python manage.py shell
then copy this as it is below
import os
print("DB Name:", os.environ.get('DB_NAME'))
======
this will ouput 
DB Name: trustagain
=----------
how to reset django password using shell
python manage.py shell
from django.contrib.auth import get_user_model
User = get_user_model()
user = User.objects.get(username='admin')
user.set_password('TrustAgain@123')
user.save()
----------------
docker compose ps === to start the container

docker compose up -d ===If the db container is not running, start it:
docker compose exec web python manage.py migrate===  This will run migrate inside the Docker container, where "db" correctly points to the PostgreSQL container.


docker compose exec web python manage.py createsuperuser
===Bonus (if needed): Run superuser setup too

docker compose up --build ====Start Django + PostgreSQL
